// Code generated by hertz generator.

package api

import (
	"context"
	"io"

	api "derma/detect/biz/model/api"
	"derma/detect/pack"
	"derma/detect/pkg/constants"
	"derma/detect/pkg/errno"
	"derma/detect/pkg/utils"
	"derma/detect/service/article"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/h2non/filetype"
)

// Publish .
// @router /derma/detect/article/publish/ [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.PublishResponse)

	// 对传入的数据做判断
	claim, err := utils.CheckToken(req.Token)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	if len(req.Title) == 0 {
		pack.SendFailResponse(c, errno.TitleEmptyError)
		return
	}

	if len(req.Content) < constants.MinContent {
		pack.SendFailResponse(c, errno.ContentTooFewWordsError)
		return
	}

	if len(req.Cover) == 0 {
		pack.SendFailResponse(c, errno.CoverEmptyError)
		return
	}

	// 发给业务层
	articleResp, err := article.NewArticleService(ctx).Publish(req, claim.UserId)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.StatusCode, resp.StatusMsg = pack.BuildBaseResp(nil)
	resp.ArticleID = articleResp.Id

	pack.SendResponse(c, resp)
}

// UploadCover .
// @router /derma/detect/article/upload-cover/ [POST]
func UploadCover(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UploadCoverRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.UploadCoverResponse)

	// 对传入的数据做判断
	claim, err := utils.CheckToken(req.Token)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	// check cover file
	file, err := c.FormFile("cover")
	if err != nil {
		pack.SendFailResponse(c, errno.PictureUploadError)
		return
	}

	if !utils.IsPictureFile(file) {
		pack.SendFailResponse(c, errno.NotPictureFileError)
		return
	}

	if !utils.CheckFileSize(file) {
		pack.SendFailResponse(c, errno.FileSizeError)
		return
	}

	fileContent, err := file.Open()
	if err != nil {
		pack.SendFailResponse(c, errno.PictureUploadError)
		return
	}

	byteContainer, err := io.ReadAll(fileContent)
	if err != nil {
		pack.SendFailResponse(c, errno.PictureUploadError)
		return
	}

	if !filetype.IsImage(byteContainer) {
		pack.SendFailResponse(c, errno.NotPictureFileError)
		return
	}

	// 发给业务层
	cover_url, err := article.NewArticleService(ctx).UploadCover(byteContainer, claim.UserId)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.StatusCode, resp.StatusMsg = pack.BuildBaseResp(nil)
	resp.CoverURL = cover_url

	pack.SendResponse(c, resp)
}

// ArticleList .
// @router /derma/detect/article/articles/ [GET]
func ArticleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ArticleListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.ArticleListResponse)
	_, err = utils.CheckToken(req.Token)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	// 发给业务层
	articlesResp, err := article.NewArticleService(ctx).ArticleList(req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.StatusCode, resp.StatusMsg = pack.BuildBaseResp(nil)
	resp.ArticleList = pack.ArticleList(articlesResp)

	pack.SendResponse(c, resp)
}

// ArticleDetail .
// @router /derma/detect/article/article-detail/ [GET]
func ArticleDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ArticleDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.ArticleDetailResponse)

	// 对传入的数据做判断
	claim, err := utils.CheckToken(req.Token)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	// 发给业务层
	articleResp, author, err := article.NewArticleService(ctx).ArticleDetail(req, claim.UserId)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.StatusCode, resp.StatusMsg = pack.BuildBaseResp(nil)
	resp.Article = pack.Article(articleResp, author)

	pack.SendResponse(c, resp)
}

// ArtilceDelete .
// @router /derma/detect/article/delete-article/ [DELETE]
func ArticleDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ArticleDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.ArticleDeleteResponse)
	// 对传入的数据做判断
	claim, err := utils.CheckToken(req.Token)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	// 发给业务层
	err = article.NewArticleService(ctx).ArticleDelete(req, claim.UserId)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.StatusCode, resp.StatusMsg = pack.BuildBaseResp(nil)

	pack.SendResponse(c, resp)
}
